<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FFT(法法塔)变化及其总结</title>
    <url>/2021/10/28/FFT-%E6%B3%95%E6%B3%95%E5%A1%94-%E5%8F%98%E5%8C%96%E5%8F%8A%E5%85%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>FFT，人称FA♂FA塔。别名，快速傅里花变化。<br>本文只探讨在算法中如何用FFT将多项式乘积优化到时间复杂度为o(nlogn)。<br>前置知识：复变函数。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="多项式处理"><a href="#多项式处理" class="headerlink" title="多项式处理"></a>多项式处理</h3><p>简单来说，形如 a0+a1X+a2X2+⋯+anXn 的代数表达式叫做多项式<br>多项式的处理一般有两种方式：<br>（敲重点！！！！）</p>
<h4 id="1-系数表示法"><a href="#1-系数表示法" class="headerlink" title="1.系数表示法"></a>1.系数表示法</h4><p>P(X)&#x3D;a0+a1X+a2X^2+⋯+anX^n，a0,a1,⋯,an叫做多项式的系数，同时这些系数也可以看成是一个n+1维的向量写作n+1维向量 a &#x3D; (a0,a1,⋯,an)。</p>
<h4 id="2-顶点表示法"><a href="#2-顶点表示法" class="headerlink" title="2.顶点表示法"></a>2.顶点表示法</h4><p>如果选取n+1个不同的数 x0,x1,⋯,xn对多项式进行求值，得到A(x0),A(x1),⋯,A(xn)，那么就称(xi,A(xi)):0≤i≤n,i∈Z为多项式A(x) 的点值表示<br>这一步看着很抽象但是其实是这样的。<br>先从最简单的也是我们最熟悉的一阶 y &#x3D; kx + b  开始考虑<br>我们只需要知道点A（x0，y0），B（x1，y1）就能晓得 y 的表达式。<br>那如果是y &#x3D; a2x^2+a1x^1+a0 很显然需要三个点才能解出这个式子。<br>那么易得，P(X)需要n+1维的向量才能被求解出来</p>
<h4 id="3-多项式乘法"><a href="#3-多项式乘法" class="headerlink" title="3.多项式乘法"></a>3.多项式乘法</h4><p><img src="/2.png"><br><img src="/3.png"></p>
<p>想必两张图解释的很清楚了。<br>这一步很关键。我们之后的分治就是依据这里的多项推导公式进行递归。</p>
<h3 id="复数相关内容"><a href="#复数相关内容" class="headerlink" title="复数相关内容"></a>复数相关内容</h3><h4 id="单位复根"><a href="#单位复根" class="headerlink" title="单位复根"></a>单位复根</h4><p>单位根</p>
<p>n次单位根是指能够满足方程zn&#x3D;1的复数，这些复数一共有n个它们都分布在复平面的单位圆上，并且构成一个正 n边形，它们把单位圆等分成n个部分</p>
<p>根据复数乘法相当于模长相乘，幅角相加就可以知道，n次单位根的模长一定是1，幅角的n倍是0<br>这样，n 次单位根也就是<br>e^(2πkin),k&#x3D;0,1,2,⋯,n−1<br>再根据欧拉公式<br>e^(θi)&#x3D;cosθ+isinθ<br>就可以知道 n 次单位根的算术表示<br>如果记ωn&#x3D;e^(2πi&#x2F;n)，那么n次单位根就是 ω0,ω1,⋯,ωn−1<br><img src="/1.png"><br>如上图<br>其实这个图上（也就是在复变函数里）写成幂次有个很好的性质，就是上图每一个点与其它点相乘，都是在原来的线段上旋转该点与原点链接的线段与x轴的角度。<br>如果你要知道为什么有这样一个性质，这边建议你去学习一下基础的群论和复变函数的知识。<br>不然你只需要知道和会验证如下的简单性质</p>
<p>(cos( n ) + i * sin ( n )) * (cos ( m ) + i * sin ( m )) &#x3D; cos ( n + m ) + i * sin ( n + m )</p>
<p>所以上面的欧拉公式的左边的 e^(θi) 可以表示旋转。<br>那么这个弱智玩意干什么用的。看着真的特喵的囬气。<br>别急，一般人都是死在看不懂这个图上，但是我们只需要对他理解的一个性质就好了。<br>就是我们可以像切蛋糕一样，把它均分成2^n份（先别急着问为什么要切成2的幂次倍，晚点你就知道了）<br>那么e^(2pi&#x2F;2^n)也就是我们说的单位根我们绕着它走一圈就能回到起点对吧（好好理解这里，后面要用的）；<br><img src="/4.png"><br>上图的性质只求会用，暂不深究，有兴趣者自行推导。<br>现在，我们带入到FFT中去理解</p>
<h4 id="大魔王的终极愤怒之屠龙勇士用火之高兴（FFT）奋力一击刚好斩杀并血冒三丈人头落地之马革裹尸（中二之力控制不住了）"><a href="#大魔王的终极愤怒之屠龙勇士用火之高兴（FFT）奋力一击刚好斩杀并血冒三丈人头落地之马革裹尸（中二之力控制不住了）" class="headerlink" title="大魔王的终极愤怒之屠龙勇士用火之高兴（FFT）奋力一击刚好斩杀并血冒三丈人头落地之马革裹尸（中二之力控制不住了）"></a>大魔王的终极愤怒之屠龙勇士用火之高兴（FFT）奋力一击刚好斩杀并血冒三丈人头落地之马革裹尸（中二之力控制不住了）</h4><p>计算多项式的乘法，或者计算两个大整数的乘法是在计算机中很常见的运算，如果用普通的方法进行，复杂度将会是O(n2)​的，还有一种分治乘法，可以做到 O(nlog23)​时间计算（可以看Karatsuba 乘法）。下面从计算多项式的乘法出发，介绍快速傅里叶变换（Fast Fourier Transform, FFT）如何在 O(nlogn)​的时间内计算出两个多项式的乘积。</p>
<p>这里读者先画3秒思考如何用普通方法来破此题。</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>很好，你会发现无论如何好像都要O(n2)才能解决这个问题。<br>那是因为你还在笛卡尔直角坐标系下考虑这个世界的一切和变化，<br>可惜的是，在宇宙的眼中，这个世界的奥妙可不是你们凡人能够随意感受和拿捏的<br>但是这时候，你拿出真理可视之眼—————FFT将我们平日里见到的笛卡尔坐标系的值转化到另一个域中去观察，<br>才会一睹那不可名状的真理的一丝容貌，它的值似乎于我们而言没有任何意义，但是却能精确的描述我们想要提出的问题。</p>
<p>首先！！！</p>
<h5 id="第一回合："><a href="#第一回合：" class="headerlink" title="第一回合："></a>第一回合：</h5><p>起手特殊召唤多项式的系数表示法，将题面中的大数看成 P(X) &#x3D; a0+a1X+a2X^2+⋯+anX^n。<br>此时不难理解当X &#x3D; 10 时即为我们题面的两个要相乘的大数。<br>然后发动魔法卡 等价转化 让P(X)转化成顶点表示法。<br>这时候我们需要去找n+1个不同的值带入进去，得到P(X)的点值表示。<br>然后回合结束。</p>
<p>此时对方发动场景卡，不可视之眼。让玩家陷入不知如何找n+1的困惑之中，从而活力降低2点，并进行一次san check；</p>
<h5 id="第二回合："><a href="#第二回合：" class="headerlink" title="第二回合："></a>第二回合：</h5><p>使用大数学家欧拉之力，召唤单位根。<br>并使用魔法卡融合。将P(X)的顶点表示法与单位根融合————召唤 复变顶点怪。<br><img src="/5.png"><br>因为单位根可以任意均分，所以先将其均分成n+1个，这样就满足解出P(X)的需求了；<br>此时埋伏两张陷阱卡。<br>然后回合结束。</p>
<p>对方埋伏一张魔法卡，回合结束。</p>
<h6 id="第三回合"><a href="#第三回合" class="headerlink" title="第三回合"></a>第三回合</h6><p>复变顶点怪进行攻击，攻击有效，因为每一个</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>games101学习笔记_1</title>
    <url>/2021/08/14/games101%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/</url>
    <content><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：windows<br>IDE：vs<br>并无使用闫老师的环境，理由是想折腾。<br>没有使用vscode，是因为每次写完代码都要用cmake重新编译一次，debug好麻烦。</p>
<h3 id="配置vs"><a href="#配置vs" class="headerlink" title="配置vs"></a>配置vs</h3><p>c++标准: 17<br><img src="/games101_1_1.png" alt="1"><br>前四个作业使用了opencv和Eigen3这两个第三方库，所以需要手动添加。<br>Eigen3还好，nuget包上直接下下来就好了只是要注意头文件写成(自行使用nuget)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;Eigen/Eigen&gt;</span><br></pre></td></tr></table></figure>
<p>而不是作业框架中的那样。<br>opencv就比较麻烦一点不能nuget一步到位。不太清楚为什么不可以。<br>网上的方法都是自己配置link。我这里也是<br>先include配置路径<br><img src="/images/games101_1_2.png" alt="2"><br>然后是library的路径<br><img src="/images/games101_1_3.png" alt="3"><br>最后再去配一下link里面的input就好了。不过这里要注意的点是两个lib文件一个有d一个没有d分别对应debug模式和release模式。<br><img src="/images/games101_1_4.png" alt="4"><br>以上，环境算是配好了。前四个作业比较麻烦，因为代码中的矩阵和显示用这两个库写起来挺方便的。之后老师出于些原因，自己手撸了一个，就不用我们配环境了。</p>
<h1 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h1><p>作业零没什么内容跳了。<br>直接开整作业一。<br>先让我们康康这个作业框架里有什么</p>
<h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p><img src="/images/games101_1_5.png" alt="5"><br>哦！我亲爱的老弟，这是一个天杀的所以程序都有的main，一个光栅化（rasterizer），还有一个三角形(Triangle)的类</p>
<h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>先让我们康康这个main里面有什么<br><img src="/images/games101_1_6.png" alt="6"><br>emmmmmm<br>上面先是闫老师在课提到的mvp模型对应的三个方法<br>然后定义了一个光栅化程序，眼睛的位置。<br>然后下面两个值比较重要，pos记录所有空间中的点，ind记录空间中那三个点形成一个三角形。<br>定义好之后，就扔到光栅化中去。这一步我们可以想象成，建模师把模型修好了现在要扔给计算器（就是那个r）去跑。<br>if那一行对应命令行操作的先不管。<br>我们现在打开while先康康<br><img src="/images/games101_1_7.png" alt="7"><br>第一行先不管，作业一暂时没有用到深度测试和颜色填充（所以并没有什么软用在这）<br>然后进行mvp<br>最后光栅化成像（r.draw）<br>成好像之后就用opencv输出。里面的参数不太用纠结。就是一些显示的画布大小（700*700），一些图像显示模式（CV_32FC3），一些内容（就是r里的玩意）<br>最后在显示到屏幕上就搞定了。<br>下面那个是控制我们模型角度的。<br>好了，理解我们大概在干什么之后开始康康我们具体是怎么实现mvp的吧。</p>
<h4 id="view函数"><a href="#view函数" class="headerlink" title="view函数"></a>view函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Eigen::Matrix4f get_view_matrix(Eigen::Vector3f eye_pos)</span><br><span class="line">&#123;</span><br><span class="line">    Eigen::Matrix4f view = Eigen::Matrix4f::Identity();</span><br><span class="line">    Eigen::Matrix4f translate;</span><br><span class="line">    translate &lt;&lt; 1, 0, 0, -eye_pos[0], 0, 1, 0, -eye_pos[1], 0, 0, 1,</span><br><span class="line">        -eye_pos[2], 0, 0, 0, 1;</span><br><span class="line"></span><br><span class="line">    view = translate * view;</span><br><span class="line"></span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第3行定义一个单位矩阵（全是1，很嗨恐怖的那种）；<br>然后我们把所有东西都平移一下，移动到以摄像机为原点。<br>所以写了一个仿射矩阵，因为是让摄像机为原点。所以所有东西都移动-eye_pos。<br>这就搞定了</p>
<h4 id="model函数"><a href="#model函数" class="headerlink" title="model函数"></a>model函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Eigen::Matrix4f get_model_matrix(float rotation_angle)</span><br><span class="line">&#123;</span><br><span class="line">    Eigen::Matrix4f model = Eigen::Matrix4f::Identity();</span><br><span class="line"></span><br><span class="line">    // TODO: Implement this function</span><br><span class="line">    // Create the model matrix for rotating the triangle around the Z axis.</span><br><span class="line">    // Then return it.</span><br><span class="line">    Eigen::Matrix4f rotate;</span><br><span class="line">    float radian = rotation_angle/180.0*MY_PI;</span><br><span class="line">    rotate &lt;&lt; cos(radian), -1*sin(radian), 0, 0,</span><br><span class="line">              sin(radian), cos(radian), 0, 0,</span><br><span class="line">              0, 0, 1, 0,</span><br><span class="line">              0, 0, 0, 1;//单纯实现了关于z轴的旋转矩阵</span><br><span class="line">    model = rotate * model; </span><br><span class="line">    return model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这并不复杂<br>这里就不推到了（bushi）<br>写一个物体绕z轴旋转angle的矩阵就好了。</p>
<h4 id="projection"><a href="#projection" class="headerlink" title="projection"></a>projection</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Eigen::Matrix4f get_projection_matrix(float eye_fov, float aspect_ratio,float zNear, float zFar)</span><br><span class="line">&#123;</span><br><span class="line">    // Students will implement this function</span><br><span class="line">    // TODO: Implement this function</span><br><span class="line">    // Create the projection matrix for the given parameters.</span><br><span class="line">    // Then return it.</span><br><span class="line">    Eigen::Matrix4f projection = Eigen::Matrix4f::Identity(); </span><br><span class="line">    Eigen::Matrix4f P2O = Eigen::Matrix4f::Identity();//将透视投影转换为正交投影的矩阵</span><br><span class="line">    P2O &lt;&lt; zNear, 0, 0, 0,</span><br><span class="line">        0, zNear, 0, 0,</span><br><span class="line">        0, 0, zNear + zFar, (-1)* zFar* zNear,</span><br><span class="line">        0, 0, 1, 0;// 进行透视投影转化为正交投影的矩阵</span><br><span class="line">    float halfEyeAngelRadian = eye_fov / 2.0 / 180.0 * MY_PI;</span><br><span class="line">    float t = zNear * std::tan(halfEyeAngelRadian);//top y轴的最高点</span><br><span class="line">    float r = t * aspect_ratio;//right x轴的最大值</span><br><span class="line">    float l = (-1) * r;//left x轴最小值</span><br><span class="line">    float b = (-1) * t;//bottom y轴的最大值</span><br><span class="line">    Eigen::Matrix4f ortho1 = Eigen::Matrix4f::Identity();</span><br><span class="line">    ortho1 &lt;&lt; 2 / (r - l), 0, 0, 0,</span><br><span class="line">        0, 2 / (t - b), 0, 0,</span><br><span class="line">        0, 0, 2 / (zNear - zFar), 0,</span><br><span class="line">        0, 0, 0, 1;//进行一定的缩放使之成为一个标准的长度为2的正方体</span><br><span class="line">    Eigen::Matrix4f ortho2 = Eigen::Matrix4f::Identity();</span><br><span class="line">    ortho2 &lt;&lt; 1, 0, 0, (-1)* (r + l) / 2,</span><br><span class="line">        0, 1, 0, (-1)* (t + b) / 2,</span><br><span class="line">        0, 0, 1, (-1)* (zNear + zFar) / 2,</span><br><span class="line">        0, 0, 0, 1;// 把一个长方体的中心移动到原点</span><br><span class="line">    Eigen::Matrix4f Matrix_ortho = ortho1 * ortho2;</span><br><span class="line">    projection = Matrix_ortho * P2O;</span><br><span class="line">    return projection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9到12行进行透视投影转化为正交投影的矩阵<br><img src="/images/games101_1_8.png" alt="8"><br>原点是我们的eyes_pos移动到原点之后的点，也就是我们眼睛看的方向。<br>n是我们视点到屏幕的距离。<br>任意一点到屏幕上的xy的变化我们用三角形很容易得出关系是<br>他的坐标变为(x′,y′) &#x3D; (x,y)*n&#x2F;z<br>这是通过透视显示在屏幕上的效果。这个显而易见。<br>但是我现在是要把透视矩阵变化为正交矩阵。<br>所以我们得像办法确定z变化之后在空间中的位置。<br>这时不够聪明的金针菇就要说了这不是很简单吗。z不变就好了。<br>确实这个面没有任何问题,但是你之后稍微转一点角度,因为z没变xy变了,会使得物体形变.</p>
]]></content>
      <tags>
        <tag>games101</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>dl笔习笔记</title>
    <url>/2021/12/15/dl%E7%AC%94%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="pytourch的基础使用"><a href="#pytourch的基础使用" class="headerlink" title="pytourch的基础使用"></a>pytourch的基础使用</h1><h2 id="万物皆数之张量"><a href="#万物皆数之张量" class="headerlink" title="万物皆数之张量"></a>万物皆数之张量</h2><p>张量的概念比较复杂，高度抽象了我们平时里的常用单位。<br>简单的说。<br>0阶的张量就是标量，一个变量足够描述，像温度。<br>1阶的张量就是矢，两个变量（空间中两个点）足够描述，像方向。<br>2阶的张量就是，3个变量（两个点和力的大小）足够描述，像力。<br>所以以此类推假如我们要识别一张600*800的图片，那么我们的张量阶数就是420000-1阶。<br>这非常方便我们把万物抽象成数字<br>他在py中也表示的很简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>这里的参数比较简单，前面是定义这个张量的大小，这里是5*5，第三个变量的TRUE<br>表示其能否求导（前向传播）<br>这个变量写的还是很有意思的。而且有些许bug。<br>就是但其为True时，我们不能对其进行一些“常规操作”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  requires_grad=False时</span></span><br><span class="line">x[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment">#  requires_grad=True时</span></span><br><span class="line">上述操作不可行</span><br></pre></td></tr></table></figure>
<p>那我们现在对其试着求导</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x*<span class="number">2</span> + y*<span class="number">3</span></span><br><span class="line">z.backward(torch.ones_like(x))</span><br></pre></td></tr></table></figure>
<p>其值为<br>tensor([[2., 2., 2., 2., 2.],<br>        [2., 2., 2., 2., 2.],<br>        [2., 2., 2., 2., 2.],<br>        [2., 2., 2., 2., 2.],<br>        [2., 2., 2., 2., 2.]])<br>虽然确实是对每个值求了偏导(总的就是梯度)，但是其实我不解为什么这个地方是2，其实应该是1。<br>我试过z &#x3D; x输出其导数。发现他们的偏导也全为1。我并不知道这是为什么，理论上应该是0啊QAQ。</p>
<h3 id="各种乘法"><a href="#各种乘法" class="headerlink" title="各种乘法"></a>各种乘法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/dl1.png" alt="1"><br>定义x，y两个变量。<br>接下来我们比较不同的乘法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">z = x.mm(y)</span><br><span class="line">z.backward(torch.ones_like(x))</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line">z = x.mul(y)</span><br><span class="line">z.backward(torch.ones_like(x))</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line">z = x*y</span><br><span class="line">z.backward(torch.ones_like(x))</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>叉乘的偏导和z的值<br><img src="/dl2.png" alt="2"></p>
<p>mm是叉乘，mul和*是点乘</p>
<h2 id="线性回归-（Linear-Regreesion）"><a href="#线性回归-（Linear-Regreesion）" class="headerlink" title="线性回归 （Linear Regreesion）"></a>线性回归 （Linear Regreesion）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引用</span></span><br><span class="line"><span class="comment"># 注意，这里我们使用了一个新库叫 seaborn 如果报错找不到包的话请使用pip install seaborn 来进行安装</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear, Module, MSELoss</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> SGD</span><br><span class="line"><span class="comment"># SGD（随机最速下降）这个玩意好难看啊QAQ</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>glsl编写shader</title>
    <url>/2021/08/23/glsl%E7%BC%96%E5%86%99shader/</url>
    <content><![CDATA[<h1 id="何为shader"><a href="#何为shader" class="headerlink" title="何为shader"></a>何为shader</h1><p>CPU端给GPU发送的一组指令，使其能在屏幕上着色（渲染图片）的程序。<br>这个过程发生在pipeline中的Vertex Processing（顶点渲染）和Fragment Processing(图元或者像素渲染)。</p>
<h2 id="何为shader-language"><a href="#何为shader-language" class="headerlink" title="何为shader language"></a>何为shader language</h2><p>编写具体的Vertex Processing和Fragment Processing的逻辑。<br>glsl有着类C风格的代码（所以可读性不高）。<br>要注意很多变量是全局的所以阅读项目非常莫名其妙如果你不懂渲染的大概流程。</p>
<h2 id="shader-setup"><a href="#shader-setup" class="headerlink" title="shader setup"></a>shader setup</h2><h3 id="1-创造shader（Vertex-和-Fragment）"><a href="#1-创造shader（Vertex-和-Fragment）" class="headerlink" title="1.创造shader（Vertex 和 Fragment）"></a>1.创造shader（Vertex 和 Fragment）</h3><h4 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h4><p>两个shader渲染的时候一般的顺序是先Vertex后Fragment。<br>这个应该很好理解，毕竟顶点都无上哪里去渲染像素。<br>然后两个shader在扔给openGL的时候里面的代码是遍历所有的顶点和像素的。所以我们不用再去写for循环，他帮我们做好了。</p>
<h4 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> aVertexPosition;(位置)</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> aNormalPosition;(法线)</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec2</span> aTextureCoord;(纹理坐标)</span><br><span class="line">(<span class="keyword">attribute</span>是只有Vertex中才有的变量)</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> uModelViewMatrix;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> uProjectionMatrix;</span><br><span class="line">（全局变量要考的）</span><br><span class="line"></span><br><span class="line">avrying <span class="keyword">highp</span> <span class="type">vec2</span> vTextureCoord;</span><br><span class="line">avrying <span class="keyword">highp</span> <span class="type">vec3</span> vFragPos;</span><br><span class="line">avrying <span class="keyword">highp</span> <span class="type">vec3</span> vNormal;</span><br><span class="line">（<span class="keyword">highp</span>是精度）</span><br><span class="line">（avrying是Vertex 和Fragment共享的变量，你比如插值什么的）</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">    vFragPos = aVertexPosition;</span><br><span class="line">    vNormal = aNormalPosition;</span><br><span class="line">    <span class="built_in">gl_Position</span> = uProjectionMatrix*uModelViewMatrix*<span class="type">vec4</span>(aVertexPosition,<span class="number">1.0</span>);</span><br><span class="line">    （不知道为什么后面要乘那个<span class="type">vec4</span>的变量的同学，去看MVP补课）</span><br><span class="line">    vTextureCoord = aTextureCoord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> uSampler;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> uKd;</span><br><span class="line">（漫反射系数，我tm也不知道为什么叫kd，明明原名叫Lambert模型）</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> uKs;</span><br><span class="line">（镜面反射系数，我也tm不知道为什么叫ks，明明原名叫Phong模型）</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> uLightPos;</span><br><span class="line">（光源位置，动态光照不稀罕这玩意）</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> uCameraPos;</span><br><span class="line">（相机位置）</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> uLightIntensity;</span><br><span class="line">（光照强度）</span><br><span class="line">umiform <span class="type">int</span> uTextureSample;</span><br><span class="line">（纹理贴图）</span><br><span class="line"></span><br><span class="line">avrying <span class="keyword">highp</span> <span class="type">vec2</span> vTextureCoord;</span><br><span class="line">avrying <span class="keyword">highp</span> <span class="type">vec3</span> vFragPos;</span><br><span class="line">avrying <span class="keyword">highp</span> <span class="type">vec3</span> vNormal;</span><br><span class="line">（同上）</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">    <span class="type">vec3</span> color;</span><br><span class="line">    <span class="keyword">if</span>(uTextureSample == <span class="number">1</span>) &#123;</span><br><span class="line">        color = <span class="built_in">pow</span>(<span class="built_in">texture2D</span>(uSampler,vTextureCoord).rgb,<span class="type">vec3</span>(<span class="number">2.2</span>));</span><br><span class="line">        （后面那个<span class="type">vec3</span>是dleta值，搞那个色差用的，一般的都是&lt;=<span class="number">3</span>）</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        color = uKd;</span><br><span class="line">    &#125;</span><br><span class="line">    （这一步有的就贴上，没有的就反射一下）</span><br><span class="line">    <span class="type">vec3</span> ambient = <span class="number">0.05</span>*color;</span><br><span class="line">    <span class="type">vec3</span> lightDir = <span class="built_in">normalize</span>(uLightPos - vFragPos);</span><br><span class="line">    <span class="type">vec3</span> normal = <span class="built_in">normalize</span>(vNormal);</span><br><span class="line">    <span class="type">float</span> diff = <span class="built_in">max</span>(<span class="built_in">dot</span>(lightDir,normal),<span class="number">0.0</span>);</span><br><span class="line">    <span class="type">float</span> light_atten_coff = uLightIntensity/<span class="built_in">length</span>(uLightPos - vFragPos);</span><br><span class="line">    <span class="type">vec3</span> diffuse =diff*light_atten_coff*color;</span><br><span class="line"></span><br><span class="line">    <span class="type">vec3</span> viewDir = <span class="built_in">normalize</span>(uCameraPos - vFragPos);</span><br><span class="line">    <span class="type">float</span> = spec = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">vec3</span> reflectDir = <span class="built_in">reflect</span>(-lightDir,normal);</span><br><span class="line">    spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(viewDir,reflectDir),<span class="number">0.0</span>)<span class="number">.35</span><span class="number">.0</span>)&#x27;</span><br><span class="line">    <span class="type">vec3</span> specular = uKs*light_atten_coff*spec;</span><br><span class="line"></span><br><span class="line">    gl_FrafColor = <span class="type">vec4</span>(<span class="built_in">pow</span>((ambient+diffuse +specular),<span class="type">vec3</span>(<span class="number">1.0</span>/<span class="number">2.2</span>)),<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-编译shader"><a href="#2-编译shader" class="headerlink" title="2.编译shader"></a>2.编译shader</h3><p>GLuint shader &#x3D; glCreateShader(type);<br>(建立一个空的shader)<br>string str &#x3D; textFileRead (filename);<br>(读取你写好的shader)<br>glShaderSource(shader, 1, &amp;cstr2, NULL);<br>glCompileShader(shader);<br>（这两步就是扔给openGL编译）</p>
<h3 id="3-添加到program"><a href="#3-添加到program" class="headerlink" title="3.添加到program"></a>3.添加到program</h3><p>GLuint program &#x3D; glCreateProgram();<br>glAttachShader(program,vertexShader);<br>glAttachShader(program,fragmentShader);<br>简单讲讲为什么要有这个program。<br>因为很多时候vertex 和fragment是相互作用的，<br>你比如一个三角形的三个顶点分别记录了一种颜色，其中覆盖的每一片像素通过他们的插值显示颜色。<br>这就要他们两个shader之间的交互了。</p>
<h3 id="4-连接program"><a href="#4-连接program" class="headerlink" title="4.连接program"></a>4.连接program</h3><p>glLinkProgram(program);<br>就链接。。。<br>链接完了之后要做一些判断<br>如果成功就返回，不成功报个错什么的。</p>
<h3 id="5-使用program"><a href="#5-使用program" class="headerlink" title="5.使用program"></a>5.使用program</h3><p>就鞥用就好了。</p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>games202代码框架简述</title>
    <url>/2021/08/27/games202%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本人对 js 和 WebGL 并不熟悉。所以若有谬误，欢迎斧正。</p>
<p>顺带一提本人对WebGL的内容的理解全部基于作业的PDF文档。</p>
<p>文章参考知乎高赞回答 <a href="https://zhuanlan.zhihu.com/p/396924653">https://zhuanlan.zhihu.com/p/396924653</a></p>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p><img src="/images/games202_1.png" alt="1"><br>主要是 assets lib src三个目录，接下来以此介绍</p>
<h2 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h2><p>顾名思义，是放资产的地方。这个地方放你的模型资源。<br><img src="/images/games202_2.png" alt="2"><br>一个模型内容只有一个obj，存放模型顶点数据。一个mtl和一个png来存储uv贴图信息。</p>
<h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p>顾名思义，这是个图书馆(bushi)，你用的所有静态库。<br><img src="/images/games202_3.png" alt="3"></p>
<h3 id="dat-gui-js"><a href="#dat-gui-js" class="headerlink" title="dat.gui.js"></a>dat.gui.js</h3><p>一个轻量 GUI 框架，主要为了实现参数调整的GUI功能<br>链接 <a href="https://github.com/dataarts/dat.gui">https://github.com/dataarts/dat.gui</a></p>
<h3 id="gl-matrix-min-js"><a href="#gl-matrix-min-js" class="headerlink" title="gl-matrix-min.js"></a>gl-matrix-min.js</h3><p>矩阵及向量库<br>链接 <a href="https://glmatrix.net/">https://glmatrix.net/</a></p>
<h3 id="imgui-umd-js-以及-imgui-impl-umd-js"><a href="#imgui-umd-js-以及-imgui-impl-umd-js" class="headerlink" title="imgui.umd.js 以及 imgui_impl.umd.js"></a>imgui.umd.js 以及 imgui_impl.umd.js</h3><p>这两个 GUI 的库在代码中并没有使用，删除这两个文件运行页面也不会报错。我猜测可能是开始想用这个库来做GUI，后来转向了 dat.GUI，然而文件并没有删除。<br>发现一个很有意思的事情是，闫老师在视频中展示的大学期间的作品的UI和这两个库的表现非常相像。(games101老师讲曲面细分那一期)<br>合理推测原框架是老师在大学期间搭的，然后助教同学整理作业的时候换成了自己更喜欢的库。但是原来的库并没有删除。</p>
<h3 id="MTLLoader-js"><a href="#MTLLoader-js" class="headerlink" title="MTLLoader.js"></a>MTLLoader.js</h3><p>实现了 .mtl 文件的加载功能，被 OBJLoader.js 使用<br>.mtl 指的是 Material Library File，带有材质参数定义，类似于Obj格式。<br>实现了贴图自由</p>
<h3 id="OrbitControls-js"><a href="#OrbitControls-js" class="headerlink" title="OrbitControls.js"></a>OrbitControls.js</h3><p>three.js 的相机控件，可以实现场景的缩放、旋转等操作，之所以不在 three.js 中，而是单独存在于一个 js 文件中，是因为这个存在于 three.js 的 example 目录下的实例代码，并不属于 three.js 的发布库。</p>
<h3 id="OBJLoader-js"><a href="#OBJLoader-js" class="headerlink" title="OBJLoader.js"></a>OBJLoader.js</h3><p>同样是 three.js 中的示例代码，实现了 .obj 文件的加载功能。</p>
<h3 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a>three.js</h3><p>three.js 封装了 WebGL 的 API， 提供了一套更加易于使用的接口</p>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p><img src="/images/games202_4.jpg" alt="4"></p>
<h3 id="engine-js"><a href="#engine-js" class="headerlink" title="engine.js"></a>engine.js</h3><p>逻辑主入口，设置了显示环境，以及 Camera 等设置。添加了 Light 和 场景中的 Objects，在逻辑的最后面创建了 UI，代码比较浅显易懂。<br>在逻辑开始的地方，使用 canvas.getContext(‘webgl’) 创建了一个 WebGLRenderingContext，这也是为什么后面可以在这个 canvas 上使用 WebGL API 的原因。</p>
<h3 id="lights"><a href="#lights" class="headerlink" title="lights"></a>lights</h3><h4 id="DirectionalLight-js"><a href="#DirectionalLight-js" class="headerlink" title="DirectionalLight.js"></a>DirectionalLight.js</h4><p>定义一个平行光</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(</span><br><span class="line">    lightIntensity,</span><br><span class="line">    lightColor,</span><br><span class="line">    lightPos,</span><br><span class="line">    focalPoint,</span><br><span class="line">    lightUp,</span><br><span class="line">    hasShadowMap,</span><br><span class="line">    gl</span><br><span class="line">  )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>前面几个参数都很好理解，但是第5行的的 focalPoint 焦点可能会让人摸不着头脑，为什么平行光还有焦点？<br>其实仔细想想会很容易理解，因为我们定义的光源还是一个点光源，在距焦点处在放一个凸透镜他就变成平行光了。<br>然后下面lightUp就定义了平行光的方向。<br>然后就是有无ShadowMap</p>
<h4 id="PointLights-js"><a href="#PointLights-js" class="headerlink" title="PointLights.js"></a>PointLights.js</h4><p>定义一个点光源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(</span><br><span class="line">    lightIntensity, </span><br><span class="line">    lightColor,</span><br><span class="line">    hasShadowMap, </span><br><span class="line">    gl)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>除了设置光源方向的和平行光没有什么不同</p>
<h3 id="loads-js"><a href="#loads-js" class="headerlink" title="loads.js"></a>loads.js</h3><p>关于加载shader和模型的相关函数</p>
<h4 id="loadOBJ-js"><a href="#loadOBJ-js" class="headerlink" title="loadOBJ.js"></a>loadOBJ.js</h4>]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>haoye</title>
    <url>/2021/12/04/haoye/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>八数码模板</title>
    <url>/2021/11/06/%E5%85%AB%E6%95%B0%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int bfs(string s)</span><br><span class="line">&#123;</span><br><span class="line">    string end = &quot;12345678x&quot;;</span><br><span class="line">    queue&lt;string&gt; q;</span><br><span class="line">    unordered_map&lt;string,int&gt; map;</span><br><span class="line">    int dx[4] = &#123;0,0,-1,1&#125;,dy[4] = &#123;1,-1,0,0&#125;;</span><br><span class="line">    q.push(s);</span><br><span class="line">    map[s] = 1;</span><br><span class="line">    while(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        auto t = q.front();</span><br><span class="line">        if(t==end)</span><br><span class="line">        &#123;</span><br><span class="line">            return map[t]-1;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        int k = t.find(&#x27;x&#x27;);</span><br><span class="line">        int x = k/3, y = k%3;</span><br><span class="line">        int d = map[t];</span><br><span class="line">        for(int i = 0; i &lt; 4; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int nx = x + dx[i], ny = y + dy[i];</span><br><span class="line">            if(nx&gt;=0 &amp;&amp; ny &gt;= 0 &amp;&amp; nx &lt;3 &amp;&amp; ny &lt; 3)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(t[k],t[nx * 3 + ny]);</span><br><span class="line">                if(!map[t])</span><br><span class="line">                &#123;</span><br><span class="line">                    map[t] = d + 1;</span><br><span class="line">                    q.push(t);</span><br><span class="line">                &#125;</span><br><span class="line">                swap(t[k],t[nx * 3 + ny]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string c, start;</span><br><span class="line"></span><br><span class="line">    for(int i = 0; i &lt; 9; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        start += c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;bfs(start)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>光学单位和常用概念什么的</title>
    <url>/2021/08/16/%E5%85%89%E5%AD%A6%E5%8D%95%E4%BD%8D%E5%92%8C%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5%E4%BB%80%E4%B9%88%E7%9A%84/</url>
    <content><![CDATA[<h2 id="1-辐射度学"><a href="#1-辐射度学" class="headerlink" title="1.辐射度学"></a>1.辐射度学</h2><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><p>辐射能 Q 一般指发散出来的能量，单位焦耳。单个光子的辐射能为 $Q &#x3D; \frac{hc}{\lambda}$(DNA动了)<br>辐射通量  $\Phi &#x3D; \frac{dQ}{dt}$ 单位时间内接收发射的能量。<br>辐射强度 $I &#x3D; \frac{d\Phi}{d\omega}$ 在给定方向上，一个<strong>点光源</strong>发出的单位<strong>立体角</strong>内的辐射通量。<br>辐亮度 $L &#x3D; \frac{d^2\Phi}{d\omega dAcos\theta} &#x3D; \frac{dI}{dAcos\theta}$定义为<strong>辐射表面</strong>在垂直其<strong>辐射传输</strong>方向上单位表面积单位立体角内发出的辐射通量。<br>辐射出射度 $ M &#x3D; \frac{d\Phi}{dA}$ 单位表面积内的辐射通量。<br>辐照度 $E &#x3D; \frac{d\Phi}{dA}$ 单位面积接受到的辐射通量。</p>
<h2 id="2-光度学"><a href="#2-光度学" class="headerlink" title="2.光度学"></a>2.光度学</h2><p>光度学只限于可见光范围内（380nm-780nm），并以人眼的视觉特性为基础。<br>讲白了就是针对地球ol中人类眼球的bug打的补丁。</p>
<h3 id="人类眼球的bug"><a href="#人类眼球的bug" class="headerlink" title="人类眼球的bug"></a>人类眼球的bug</h3><p>光谱光效能 $K(\lambda) &#x3D; \frac{\Phi_v (\lambda)}{\Phi_e (\lambda)}$ 这表示某一波长上<strong>每W辐射通量</strong>可产生多少流明的<strong>光通量</strong>。<br>$\Phi_e$这个是上面的辐射通量。<br>$\Phi_v$这是人眼感受到的亮度，单位流明。<br>光谱光效图（视觉函数）$V(\lambda) &#x3D; \frac{K(\lambda)}{K_m}$,归一化光谱光效能</p>
<p>阿斯顿$f(n)&#x3D;\sum_{d|n}g(d)$事哒</p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑</title>
    <url>/2021/11/07/%E6%8B%93%E6%89%91/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 1e5+5, M = 1e5+5;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int y,next;</span><br><span class="line">    </span><br><span class="line">&#125;h[M];</span><br><span class="line"></span><br><span class="line">int e[N],rd[N];</span><br><span class="line">int tot;</span><br><span class="line">int list[N];</span><br><span class="line">void add(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    tot++;</span><br><span class="line">    h[tot].y = b;</span><br><span class="line">    h[tot].next = e[a];</span><br><span class="line">    e[a] = tot;</span><br><span class="line">    rd[b]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    while(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        int a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        add(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    int r = 0;</span><br><span class="line">    for(int i=1; i &lt;= n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!rd[i])</span><br><span class="line">        list[r++] = i;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    while(r--)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = e[list[r]]; i ; i = h[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            rd[h[i].y]--;</span><br><span class="line">            if(h[i].y==0)</span><br><span class="line">            cout&lt;&lt;h[i].y&lt;&lt;&quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>致猪猪</title>
    <url>/2021/08/13/%E8%87%B4%E7%8C%AA%E7%8C%AA/</url>
    <content><![CDATA[<h1 id="致猪猪"><a href="#致猪猪" class="headerlink" title="致猪猪"></a>致猪猪</h1><p>猪猪子是一种粘人的不可燃物。<br>从以前到现在都是。<br>像是一嵌在肉里的指甲，你想甩甩不掉，时间长了还要修理一下她，不然搁着你难受。但是没了她又不行。<br>从前有个傻子问我，问我为什么会喜欢她。<br>我说，说了你也不懂。<br>我只是突然想起，在宇宙初始，所有的物质都是一些星团互相簇拥着。那个时候你在我身边用你的引力吸引着我来到了太阳系。现在我们都幻化成人，你和当初都不曾变过，却反倒怪罪我问我为何？真是有够搞笑的呢。<br>还记得当时太阳的胚胎在蚕食周围的星带的时候，猪猪因为你的不可燃，被它抛弃而委屈。却转而傲娇的不屑对一旁道，太阳有什么好的，又不能吃。<br>”你还会吃的吗&#x3D; &#x3D;“<br>一晃神，我被小行星带到那颗唯一的蓝色星球上。虽然和你分开了，但是我却感到无妨，毕竟你对我的引力还在。<br>一路走走停停，低熵的时代一下就要过去了。复杂起来的世界，正在逐渐剥夺我的意识包括感受你的引力，我想你也是如此。<br>……<br>如今的你我不过是当年的星辰罢了。你也还是一样，粘人而不可燃。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>莫比乌斯反演</title>
    <url>/2022/03/25/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
    <content><![CDATA[<h3 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h3><p>对于一些函数$f(x)$,如果很难直接求出它的值，而容易求出<strong>其倍数和或约数和</strong>$g(x)$那么可以通过莫比乌斯反演简化运算，求得$f(x)$的值。</p>
<p>如果有 $f(n)&#x3D;\sum_{d|n}g(d)$那么就有 $g(n)&#x3D;\sum_{d|n}\mu(d)f(n&#x2F;d)$</p>
<p>如果有 $f(n)&#x3D;\sum_{n|d}g(d)$那么就有 $g(n)&#x3D;\sum_{n|d}\mu(d&#x2F;n)f(d)$</p>
<p>这两条式子非常清新脱俗。想必看一眼就能明白（bushi）。</p>
<p>首先解释一下$\sum_{d|n}g(d)$ </p>
<p>和$\sum_{n|d}g(d)$这是什么意思。</p>
<p>$\sum_{d|n}g(d)$就是对所有$d$是$n$的约数的$g(d)$求和。</p>
<p>$\sum_{n|d}g(d)$就是对所有$n$是$d$的倍数的$g(n)$求和。</p>
<p>到这里应该都好理解。</p>
<p>接下来解释一下$\mu(n)$是做什么的</p>
<p>$$<br>\mu(x)&#x3D;\left{<br>\begin{aligned}<br>1 &amp;&amp; n&#x3D;1 \<br>(-1)^k &amp;&amp; n&#x3D;\prod_{i&#x3D;1}^k p_{i}\<br>\end{aligned}<br>\right.<br>$$</p>
<p>解释一下，上面的 $p_{i}$ 是互不相等的质数。(下同)<br>也就是说当x是必须得是<strong>互不相等奇数个质数的乘积</strong>结果才为-1。<br>如果x是<strong>互不相等</strong>偶数个质数的乘积和x为1时，那么结果就是1。<br>其余结果为0。<br>这个式子看着很抽象，但是你只要先记着，他是来描述一个数他的自身与质数有关结构的就好了。<br>而且他有一个顶好的性质如下<br>$$<br>\sum_{d|n} \mu(d) &#x3D; 1<br>$$<br>证明如下：<br>色(设)：$n&#x3D;\prod_{i&#x3D;1}^kp_{i}^{c_i}$$n^{‘}&#x3D;\prod_{i&#x3D;1}^kp_{i}$<br>那么<br>其实也就是说$n^{‘}$是$n$的倍数。</p>
<p>下面是一道例题的链接</p>
<p><a href="https://www.acwing.com/problem/content/2704/">https://www.acwing.com/problem/content/2704/</a></p>
<p>不清楚gcd过程的可以去补习一下欧几里得算法，以下不做详细证明。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>起手式</title>
    <url>/2022/01/31/%E8%B5%B7%E6%89%8B%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define gcd(a, b) __gcd(a, b)</span><br><span class="line">#define INF 0x3f3f3f3f3f</span><br><span class="line">#define eps 1e-6</span><br><span class="line">#define PI acos(-1.0)</span><br><span class="line">#define pb push_back</span><br><span class="line">#define mp make_pair</span><br><span class="line">#define fst first</span><br><span class="line">#define sec second</span><br><span class="line">#define eif else if</span><br><span class="line">#define en putchar(&#x27;\n&#x27;)</span><br><span class="line">#define rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="line">#define red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="line">#define mem(a, x) memset(a, x, sizeof(a))</span><br><span class="line">#define IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="line">#define maxn 400005</span><br><span class="line">#define mod 1000000007</span><br><span class="line">#define freeeeeG main</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define pll pair&lt;ll, ll&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void work()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int freeeeeG()</span><br><span class="line">&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>诗篇10</title>
    <url>/2021/11/11/%E8%AF%97%E7%AF%8710/</url>
    <content><![CDATA[<h1 id="诗篇10"><a href="#诗篇10" class="headerlink" title="诗篇10"></a>诗篇10</h1><p>你曾见过日全食吗？<br>太阳到地球的距离是月球到地球的400倍，而月球的直径恰好也是太阳的400分之一。<br>而且，日月的轨道，恰好使他们每个月相交两次，这意味着，月亮有时会精确地盖住太阳的圆盘，并且恰好可以在美妙而可怕的几分钟内完全遮蔽。<br>伟大的东西之所以伟大，并不是因为它多么雄伟，而是它能让普通的人都能为之震撼。</p>
<p>人们若是去买彩票中了数万分之一概率才能中的头奖，必然会感叹自己的运气很好。若是连续十天连续中头奖，便会被人认为有猫腻，会被认为这是世上不可能发生的事，毕竟这个概率小到不可能发生。<br>但是生物的诞生和延续，直到人类出现和文明诞生。是地球数十亿年中连续中数十张头奖结果，我们很少意识到我们的存在本身就是奇迹本身。<br>然而我们似乎在奇迹中生活太久而忘记了每天都处于伟大的事物当中。</p>
<p>我向来是不愿意将自己的感情和感受与那些高尚的东西绑定，这样仿佛我的本身感情和感受也变的高尚一般。<br>而我的感情或许本身就是低俗而肤浅的，它绝对不是世间的某种真理或是某种哪位哲人的理想。<br>但它是伟大而令人震撼的。尽管它如此的平凡又不温不火的在我们身上发展。<br>我想，遇到并爱上你这件事本身。<br>就足够了。<br>我的小猪猪。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
